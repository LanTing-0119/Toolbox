# 模拟一组基因表达数据（例如 100 个基因在一个样本中的表达值）
set.seed(123)
n_genes <- 100
expr <- rnorm(n_genes, mean = 5, sd = 2)  # 模拟表达值
# 绘制原始数据的直方图
hist(expr, breaks = 20, main = "Histogram of simulated expression", xlab = "Expression")
# ---------------------------
# 1. 利用高斯核估计表达数据的密度分布
# 使用 density() 函数进行核密度估计
dens <- density(expr, kernel = "gaussian", n = 512)
dens
plot(dens, main = "Kernel Density Estimation (Gaussian Kernel)", xlab = "Expression")
diff(dens$x[1:2])
dens
dens$x
# ---------------------------
# 2. 计算累积分布函数 (CDF)
# 根据核密度估计的结果，数值积分得到 CDF
cdf <- cumsum(dens$y) * diff(dens$x[1:2])
plot(dens$x, cdf, type = "l", main = "Estimated Cumulative Distribution Function (CDF)",
xlab = "Expression", ylab = "CDF")
# ---------------------------
# 2. 计算累积分布函数 (CDF)
# 根据核密度估计的结果，数值积分得到 CDF
cdf <- cumsum(dens$y) * diff(dens$x[1:20])
plot(dens$x, cdf, type = "l", main = "Estimated Cumulative Distribution Function (CDF)",
xlab = "Expression", ylab = "CDF")
# ---------------------------
# 2. 计算累积分布函数 (CDF)
# 根据核密度估计的结果，数值积分得到 CDF
cdf <- cumsum(dens$y) * diff(dens$x[1:2])
# 手动实现高斯核密度估计
set.seed(123)
# 模拟数据：100个数据点，服从正态分布
data_points <- rnorm(100, mean = 5, sd = 2)
data_points %>% hist()
library(dplyr)
data_points %>% hist()
# 定义高斯核函数
gaussian_kernel <- function(u) {
1 / sqrt(2 * pi) * exp(-0.5 * u^2)
}
# 定义手动核密度估计函数
manual_kde <- function(x, data, h) {
n <- length(data)
# 对 x 处的密度估计
density_est <- sapply(x, function(x0) {
u <- (x0 - data) / h
sum(gaussian_kernel(u)) / (n * h)
})
return(density_est)
}
# 定义估计范围和带宽
x_vals <- seq(min(data_points) - 1, max(data_points) + 1, length.out = 512)
h <- 0.5  # 带宽参数，可调整
x_vals
x_vals
data_points
# 定义手动核密度估计函数
manual_kde <- function(x, data, h) {
n <- length(data)
# 对 x 处的密度估计
density_est <- sapply(x, function(x0) {
u <- (x0 - data) / h
sum(gaussian_kernel(u)) / (n * h)
})
return(density_est)
}
# 计算手动高斯核密度估计
manual_density <- manual_kde(x_vals, data_points, h)
manual_density
pi
x_vals
data_points
x_vals %>% hist()
data_points
x=x_vals
data=data_points
n <- length(data)
n
# 对 x 处的密度估计
density_est <- sapply(x, function(x0) {
u <- (x0 - data) / h
sum(gaussian_kernel(u)) / (n * h)
})
density_est
x0=x[1]
x0
u <- (x0 - data) / h
u
(n * h)
gaussian_kernel(u)
u
# ---------------------------
# 2. 计算累积分布函数 (CDF)
# 根据核密度估计的结果，数值积分得到 CDF
cdf <- cumsum(dens$y) * diff(dens$x[1:2])
plot(dens$x, cdf, type = "l", main = "Estimated Cumulative Distribution Function (CDF)",
xlab = "Expression", ylab = "CDF")
# ---------------------------
# 3. 模拟一个基因集
# 假设基因集只包含其中 20% 的基因，随机抽取
set_size <- round(n_genes * 0.2)
gene_set_indices <- sort(sample(1:n_genes, set_size))
cat("Indices of genes in the gene set:\n")
print(gene_set_indices)
expr
# 将表达数据按升序排序，得到排序索引
ord <- order(expr)
sorted_expr <- expr[ord]
# 同时获得基因在排序后的位置是否属于基因集（TRUE: 属于基因集；FALSE: 不属于）
in_gene_set <- ord %in% gene_set_indices
in_gene_set
# 绘制排序后的表达值及其所属信息
plot(1:n_genes, sorted_expr, type = "b", pch = 16,
main = "Sorted Expression Values",
xlab = "Rank", ylab = "Expression")
points(which(in_gene_set), sorted_expr[in_gene_set], col = "red", pch = 16)
legend("topleft", legend = c("Not in gene set", "In gene set"),
col = c("black", "red"), pch = 16)
# ---------------------------
# 4. 计算类似 Kolmogorov-Smirnov 的统计量
# 我们分别计算基因集内和外的累积分布（基于排序的相对位置）
# 累计“命中率”（hit）与“未命中率”（miss）的差异
# 定义一个函数来计算累计差值
compute_ks_stat <- function(hit_vector) {
n <- length(hit_vector)
# 命中率：若是基因集，则 1/(总命中数)，否则为 0
n_hits <- sum(hit_vector)
n_misses <- n - n_hits
hit_score <- if(n_hits > 0) hit_vector / n_hits else rep(0, n)
miss_score <- if(n_misses > 0) (!hit_vector) / n_misses else rep(0, n)
running_diff <- cumsum(hit_score - miss_score)
return(running_diff)
}
# ---------------------------
# 4. 计算类似 Kolmogorov-Smirnov 的统计量
# 我们分别计算基因集内和外的累积分布（基于排序的相对位置）
# 累计“命中率”（hit）与“未命中率”（miss）的差异
hit_vector = in_gene_set
hit_vector
n <- length(hit_vector)
# 命中率：若是基因集，则 1/(总命中数)，否则为 0
n_hits <- sum(hit_vector)
n_hits
n_misses <- n - n_hits
n_misses
hit_score <- if(n_hits > 0) hit_vector / n_hits else rep(0, n)
hit_score
miss_score <- if(n_misses > 0) (!hit_vector) / n_misses else rep(0, n)
miss_score
running_diff <- cumsum(hit_score - miss_score)
# 绘制运行中的累计差值曲线
plot(1:n_genes, ks_stat, type = "l", lwd = 2,
main = "Running KS-like Statistic for the Gene Set",
xlab = "Rank (sorted by expression)",
ylab = "Cumulative Difference")
ks_stat <- cumsum(hit_score - miss_score)
# 绘制运行中的累计差值曲线
plot(1:n_genes, ks_stat, type = "l", lwd = 2,
main = "Running KS-like Statistic for the Gene Set",
xlab = "Rank (sorted by expression)",
ylab = "Cumulative Difference")
abline(h = 0, col = "gray", lty = 2)
# 计算统计量：最大偏差的绝对值
max_deviation <- max(abs(ks_stat))
cat("Maximum deviation (enrichment score):", max_deviation, "\n")
n_genes
expr
# 绘制原始数据的直方图
hist(expr, breaks = 20, main = "Histogram of simulated expression", xlab = "Expression")
# ---------------------------
# 1. 利用高斯核估计表达数据的密度分布
# 使用 density() 函数进行核密度估计
dens <- density(expr, kernel = "gaussian", n = 512)
plot(dens, main = "Kernel Density Estimation (Gaussian Kernel)", xlab = "Expression")
# ---------------------------
# 2. 计算累积分布函数 (CDF)
# 根据核密度估计的结果，数值积分得到 CDF
cdf <- cumsum(dens$y) * diff(dens$x[1:2])
plot(dens$x, cdf, type = "l", main = "Estimated Cumulative Distribution Function (CDF)",
xlab = "Expression", ylab = "CDF")
# ---------------------------
# 3. 模拟一个基因集
# 假设基因集只包含其中 20% 的基因，随机抽取
set_size <- round(n_genes * 0.2)
gene_set_indices <- sort(sample(1:n_genes, set_size))
cat("Indices of genes in the gene set:\n")
print(gene_set_indices)
# 将表达数据按升序排序，得到排序索引
ord <- order(expr)
sorted_expr <- expr[ord]
# 同时获得基因在排序后的位置是否属于基因集（TRUE: 属于基因集；FALSE: 不属于）
in_gene_set <- ord %in% gene_set_indices
# 绘制排序后的表达值及其所属信息
plot(1:n_genes, sorted_expr, type = "b", pch = 16,
main = "Sorted Expression Values",
xlab = "Rank", ylab = "Expression")
points(which(in_gene_set), sorted_expr[in_gene_set], col = "red", pch = 16)
legend("topleft", legend = c("Not in gene set", "In gene set"),
col = c("black", "red"), pch = 16)
# ---------------------------
# 1. 利用高斯核估计表达数据的密度分布
# 使用 density() 函数进行核密度估计
dens <- density(expr, kernel = "gaussian", n = 512)
plot(dens, main = "Kernel Density Estimation (Gaussian Kernel)", xlab = "Expression")
# 绘制原始数据的直方图
hist(expr, breaks = 20, main = "Histogram of simulated expression", xlab = "Expression")
print(gene_set_indices)
# 将表达数据按升序排序，得到排序索引
ord <- order(expr)
sorted_expr <- expr[ord]
# 同时获得基因在排序后的位置是否属于基因集（TRUE: 属于基因集；FALSE: 不属于）
in_gene_set <- ord %in% gene_set_indices
# 绘制排序后的表达值及其所属信息
plot(1:n_genes, sorted_expr, type = "b", pch = 16,
main = "Sorted Expression Values",
xlab = "Rank", ylab = "Expression")
sorted_expr
cdf
# ---------------------------
# 2. 计算累积分布函数 (CDF)
# 根据核密度估计的结果，数值积分得到 CDF
cdf <- cumsum(dens$y) * diff(dens$x[1:2])
plot(dens$x, cdf, type = "l", main = "Estimated Cumulative Distribution Function (CDF)",
xlab = "Expression", ylab = "CDF")
# ---------------------------
# 3. 模拟一个基因集
# 假设基因集只包含其中 20% 的基因，随机抽取
set_size <- round(n_genes * 0.2)
gene_set_indices <- sort(sample(1:n_genes, set_size))
cat("Indices of genes in the gene set:\n")
print(gene_set_indices)
# 将表达数据按升序排序，得到排序索引
ord <- order(expr)
sorted_expr <- expr[ord]
# 同时获得基因在排序后的位置是否属于基因集（TRUE: 属于基因集；FALSE: 不属于）
in_gene_set <- ord %in% gene_set_indices
# 绘制排序后的表达值及其所属信息
plot(1:n_genes, sorted_expr, type = "b", pch = 16,
main = "Sorted Expression Values",
xlab = "Rank", ylab = "Expression")
points(which(in_gene_set), sorted_expr[in_gene_set], col = "red", pch = 16)
legend("topleft", legend = c("Not in gene set", "In gene set"),
col = c("black", "red"), pch = 16)
# ---------------------------
# 4. 计算类似 Kolmogorov-Smirnov 的统计量
# 我们分别计算基因集内和外的累积分布（基于排序的相对位置）
# 累计“命中率”（hit）与“未命中率”（miss）的差异
hit_vector = in_gene_set
n <- length(hit_vector)
cdf
cumsum
# 绘制运行中的累计差值曲线
plot(1:n_genes, ks_stat, type = "l", lwd = 2,
main = "Running KS-like Statistic for the Gene Set",
xlab = "Rank (sorted by expression)",
ylab = "Cumulative Difference")
# 绘制排序后的表达值及其所属信息
plot(1:n_genes, sorted_expr, type = "b", pch = 16,
main = "Sorted Expression Values",
xlab = "Rank", ylab = "Expression")
points(which(in_gene_set), sorted_expr[in_gene_set], col = "red", pch = 16)
legend("topleft", legend = c("Not in gene set", "In gene set"),
col = c("black", "red"), pch = 16)
